#include <iostream>
#include <pcap.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>

void packet_handler(u_char *user_data, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
    struct ip *ip_header = (struct ip*)(packet + 14); // Skip Ethernet header
    struct tcphdr *tcp_header = (struct tcphdr*)(packet + 14 + ip_header->ip_hl * 4);
    
    char src_ip[INET_ADDRSTRLEN];
    char dst_ip[INET_ADDRSTRLEN];
    inet_ntop(AF_INET, &(ip_header->ip_src), src_ip, INET_ADDRSTRLEN);
    inet_ntop(AF_INET, &(ip_header->ip_dst), dst_ip, INET_ADDRSTRLEN);
    
    std::cout << "Packet: " << src_ip << ":" << ntohs(tcp_header->th_sport)
              << " -> " << dst_ip << ":" << ntohs(tcp_header->th_dport)
              << " Size: " << pkthdr->len << " bytes" << std::endl;
}

int main() {
    char errbuf[PCAP_ERRBUF_SIZE];
    pcap_t *handle = pcap_open_live("eth0", BUFSIZ, 1, 1000, errbuf);
    
    if (handle == nullptr) {
        std::cerr << "Couldn't open device: " << errbuf << std::endl;
        return 1;
    }
    
    if (pcap_loop(handle, 0, packet_handler, nullptr) < 0) {
        std::cerr << "pcap_loop failed: " << pcap_geterr(handle) << std::endl;
        return 1;
    }
    
    pcap_close(handle);
    return 0;
}
